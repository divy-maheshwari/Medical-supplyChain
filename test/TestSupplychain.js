// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')
var Manufacturer = artifacts.require("ManufacturerRole");
var Distributor = artifacts.require("DistributorRole");
var Pharmacist = artifacts.require("PharmacistRole");
var Patient = artifacts.require("PatientRole");
const truffleAssert = require('truffle-assertions');

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originManufacturerID = accounts[1]
    const originFactoryName = "John Doe"
    const originFactoryInformation = "Yarray Valley"
    const originFactoryLatitude = "-38.239770"
    const originFactoryLongitude = "144.341490"
    var medicineID = sku + upc
    const medicineNotes = "Best beans for Espresso"
    const medicinePrice = web3.utils.toWei("1", "ether")
    var medicineState = 0
    const distributorID = accounts[2]
    const pharmacistID = accounts[3]
    const patientID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Manufacturer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Pharmacist: accounts[3] ", accounts[3])
    console.log("Patient: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function makeMedicine() that allows a manufacturer to make medicine", async() => {  
      const supplyChain = await SupplyChain.deployed()
      await supplyChain.addManufacturer(accounts[1]);
        
        // Declare and Initialize a variable for event
        // var eventEmitted = false
        
        // // Watch the emitted event Made()
        // setTimeout( () => {
        //     assert(eventEmitted, 'Event did not fire in 1000 ms.');
        //     done();
        //   }, 1000);
        // supplyChain.Made((err, res) => {
        //     eventEmitted = true;
        // })


        // Mark a medicine as Made by calling function makeMedicine()
        const result = await supplyChain.makeMedicine(upc, originManufacturerID, originFactoryName, originFactoryInformation, originFactoryLatitude, originFactoryLongitude, medicineNotes,{from:originManufacturerID})
        truffleAssert.eventEmitted(result, 'Made');
        // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()
        const resultBufferOne = await supplyChain.fetchMedicineBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchMedicineBufferTwo.call(upc)
        const resultBufferThree = await supplyChain.fetchMedicineBufferThree.call(upc)
        // Verify the result set
        // console.log(resultBufferOne);
        assert.equal(resultBufferThree[0], sku, 'Error: Invalid medicine SKU')
        assert.equal(resultBufferThree[1], upc, 'Error: Invalid medicine UPC')
        assert.equal(resultBufferOne[0], originManufacturerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[1], originManufacturerID, 'Error: Missing or Invalid originManufacturerID')
        assert.equal(resultBufferOne[2], originFactoryName, 'Error: Missing or Invalid originFactoryName')
        assert.equal(resultBufferOne[3], originFactoryInformation, 'Error: Missing or Invalid originFactoryInformation')
        assert.equal(resultBufferOne[4], originFactoryLatitude, 'Error: Missing or Invalid originFactoryLatitude')
        assert.equal(resultBufferOne[5], originFactoryLongitude, 'Error: Missing or Invalid originFactoryLongitude')
        assert.equal(resultBufferTwo[2], 0, 'Error: Invalid medicine State')
      //  assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function packMedicine() that allows a manufacturer to pack medicine", async() => {
      const supplyChain = await SupplyChain.deployed()
     // await supplyChain.addManufacturer(accounts[1]);

        // Declare and Initialize a variable for event
        // var eventEmitted = false
        
        // // Watch the emitted event Packed()
        // setTimeout( () => {
        //     assert(eventEmitted, 'Event did not fire in 1000 ms.');
        //     done();
        //   }, 1000);
        // supplyChain.Packed((err, res) => {
        //     eventEmitted = true;
        // })


        // Mark a medicine as Packed by calling function PackMedicine()
        const result = await supplyChain.packMedicine(upc,{from:originManufacturerID})
        truffleAssert.eventEmitted(result, 'Packed');

        // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()
        const resultBufferTwo = await supplyChain.fetchMedicineBufferTwo.call(upc)
        
        assert.equal(resultBufferTwo[2], 1, 'Error: Invalid medicine State')
     //   assert.equal(eventEmitted, true, 'Invalid event emitted')    
       
    })    
    // 4th Test
    it("Testing smart contract function sellMedicine() that allows a manufacturer to sell medicine", async() => { 
      const supplyChain = await SupplyChain.deployed()
     // await supplyChain.addManufacturer(accounts[1]);
        
        // Declare and Initialize a variable for event
        // var eventEmitted = false
        
        // // Watch the emitted event ForSale()
        // setTimeout( () => {
        //     assert(eventEmitted, 'Event did not fire in 1000 ms.');
        //     done();
        //   }, 1000);
        // supplyChain.ForSale((err, res) => {
        //     eventEmitted = true;
        // })


        // Mark an medicine as ForSale by calling function sellMedicine()
        const result =  await supplyChain.sellMedicine(upc,web3.utils.toWei("1", "ether"),{from:originManufacturerID})
        truffleAssert.eventEmitted(result, 'ForSale');
        // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()
        const resultBufferTwo = await supplyChain.fetchMedicineBufferTwo.call(upc)
        
        assert.equal(resultBufferTwo[2], 2, 'Error: Invalid medicine State')
       // assert.equal(eventEmitted, true, 'Invalid event emitted')    
       
    })    

    // 5th Test
    it("Testing smart contract function buyMedicine() that allows a distributor to buy medicine", async() => {  
      const supplyChain = await SupplyChain.deployed()
      await supplyChain.addDistributor(accounts[2]);
        // Declare and Initialize a variable for event
        // var eventEmitted = false
        
        // // Watch the emitted event Sold()
        // setTimeout( () => {
        //     assert(eventEmitted, 'Event did not fire in 1000 ms.');
        //     done();
        //   }, 1000);
        // supplyChain.Sold((err, res) => {
        //     eventEmitted = true;
        // })


        // Mark a medicine as Sold by calling function buyMedicine()
       const result =  await supplyChain.buyMedicine(upc,{value: web3.utils.toWei('1', 'ether'),from:distributorID })
       truffleAssert.eventEmitted(result, 'Sold');
        // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()
        const resultBufferTwo = await supplyChain.fetchMedicineBufferTwo.call(upc)
        
        assert.equal(resultBufferTwo[2], 3, 'Error: Invalid medicine State')
      //  assert.equal(eventEmitted, true, 'Invalid event emitted')    
       
    })    
        


    // 6th Test
    it("Testing smart contract function shipMedicine() that allows a distributor to ship medicine", async() => {
      const supplyChain = await SupplyChain.deployed()
    //  await supplyChain.addManufacturer(accounts[1]);
        
        // Declare and Initialize a variable for event
        // var eventEmitted = false

        // // Watch the emitted event Packed()
        // setTimeout( () => {
        //     assert(eventEmitted, 'Event did not fire in 1000 ms.');
        //     done();
        //   }, 1000);
        // supplyChain.Shipped((err, res) => {
        //     eventEmitted = true;
        // })
    //    await supplyChain.addManufacturer(originManufacturerID)


        // Mark an medicine as Shipped by calling function shipMedicine()
       const result =  await supplyChain.shipMedicine(upc,{from: originManufacturerID})
        truffleAssert.eventEmitted(result, 'Shipped');
        // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()
        const resultBufferTwo = await supplyChain.fetchMedicineBufferTwo.call(upc)
        
        assert.equal(resultBufferTwo[2], 4, 'Error: Invalid medicine State')
      //  assert.equal(eventEmitted, true, 'Invalid event emitted')    
       
    })    

  

    // 7th Test
    it("Testing smart contract function receiveMedicine() that allows a pharmacist to mark medicine received", async() => { 
      const supplyChain = await SupplyChain.deployed()
      await supplyChain.addPharmacist(accounts[3]);
        
        // Declare and Initialize a variable for event
        
        // var eventEmitted = false
        
        // // Watch the emitted event Received()
        // setTimeout( () => {
        //     assert(eventEmitted, 'Event did not fire in 1000 ms.');
        //     done();
        //   }, 1000);
        // supplyChain.Received((err, res) => {
        //     eventEmitted = true;
        // })


        // Mark an medicine as Reiceived by calling function receiveMedicine()
      const result =  await supplyChain.receiveMedicine(upc,{from:pharmacistID})
        truffleAssert.eventEmitted(result, 'Received');
        // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()
        const resultBufferTwo = await supplyChain.fetchMedicineBufferTwo.call(upc)
        
        assert.equal(resultBufferTwo[2], 5, 'Error: Invalid medicine State')
    //    assert.equal(eventEmitted, true, 'Invalid event emitted')    
       

    })    

    // 8th Test
    it("Testing smart contract function purchaseMedicine() that allows a patient to purchase medicine", async() => {  
      const supplyChain = await SupplyChain.deployed()
      await supplyChain.addPatient(accounts[4]);
        
        // Declare and Initialize a variable for event
        
        // var eventEmitted = false
        
        // // Watch the emitted event Purchased()
        // setTimeout( () => {
        //     assert(eventEmitted, 'Event did not fire in 1000 ms.');
        //     done();
        //   }, 1000);
        // supplyChain.Purchased((err, res) => {
        //     eventEmitted = true;
        // })


        // Mark an medicine as Purchased by calling function purchaseMedicine()
       const result = await supplyChain.purchaseMedicine(upc,{from:patientID})
        truffleAssert.eventEmitted(result, 'Purchased');
        // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()
        const resultBufferTwo = await supplyChain.fetchMedicineBufferTwo.call(upc)
        
        assert.equal(resultBufferTwo[2], 6, 'Error: Invalid medicine State')
     //   assert.equal(eventEmitted, true, 'Invalid event emitted')    
       
    
        
    })    


// // Deleted as I have already tested them in the first case
//     // 9th Test
//     it("Testing smart contract function fetchMedicineBufferOne() that allows anyone to fetch medicine details from blockchain", async() => {
//         const supplyChain = await SupplyChain.deployed()

//         // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()
        
        
//         // Verify the result set:
        
//     })

//     // 10th Test
//     it("Testing smart contract function fetchMedicineBufferTwo() that allows anyone to fetch medicine details from blockchain", async() => {
//         const supplyChain = await SupplyChain.deployed()

//         // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()
        
        
//         // Verify the result set:
        
//     })

});

